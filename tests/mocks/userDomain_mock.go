// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Go\go-jwt\domain\user\userDomain.go
//
// Generated by this command:
//
//	mockgen -source=D:\Go\go-jwt\domain\user\userDomain.go -destination=D:\Go\go-jwt\tests\mocks\userDomain_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	errorhandler "go-jwt/errorHandler"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserDomainInterface is a mock of UserDomainInterface interface.
type MockUserDomainInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserDomainInterfaceMockRecorder
	isgomock struct{}
}

// MockUserDomainInterfaceMockRecorder is the mock recorder for MockUserDomainInterface.
type MockUserDomainInterfaceMockRecorder struct {
	mock *MockUserDomainInterface
}

// NewMockUserDomainInterface creates a new mock instance.
func NewMockUserDomainInterface(ctrl *gomock.Controller) *MockUserDomainInterface {
	mock := &MockUserDomainInterface{ctrl: ctrl}
	mock.recorder = &MockUserDomainInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDomainInterface) EXPECT() *MockUserDomainInterfaceMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockUserDomainInterface) ComparePassword(arg0 string) *errorhandler.ErrorHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", arg0)
	ret0, _ := ret[0].(*errorhandler.ErrorHandler)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockUserDomainInterfaceMockRecorder) ComparePassword(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockUserDomainInterface)(nil).ComparePassword), arg0)
}

// EncryptPassword mocks base method.
func (m *MockUserDomainInterface) EncryptPassword() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EncryptPassword")
}

// EncryptPassword indicates an expected call of EncryptPassword.
func (mr *MockUserDomainInterfaceMockRecorder) EncryptPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPassword", reflect.TypeOf((*MockUserDomainInterface)(nil).EncryptPassword))
}

// GenerateToken mocks base method.
func (m *MockUserDomainInterface) GenerateToken() (string, *errorhandler.ErrorHandler) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errorhandler.ErrorHandler)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockUserDomainInterfaceMockRecorder) GenerateToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockUserDomainInterface)(nil).GenerateToken))
}

// GetEmail mocks base method.
func (m *MockUserDomainInterface) GetEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockUserDomainInterfaceMockRecorder) GetEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockUserDomainInterface)(nil).GetEmail))
}

// GetPassword mocks base method.
func (m *MockUserDomainInterface) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockUserDomainInterfaceMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockUserDomainInterface)(nil).GetPassword))
}
