// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Go\go-jwt\domain\user\services\userInterface.go
//
// Generated by this command:
//
//	mockgen -source=D:\Go\go-jwt\domain\user\services\userInterface.go -destination=D:\Go\go-jwt\tests\mocks\userService_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	requestdto "go-jwt/controllers/requestDTO"
	domain "go-jwt/domain/user"
	errorhandler "go-jwt/errorHandler"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserDomainService is a mock of UserDomainService interface.
type MockUserDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockUserDomainServiceMockRecorder
	isgomock struct{}
}

// MockUserDomainServiceMockRecorder is the mock recorder for MockUserDomainService.
type MockUserDomainServiceMockRecorder struct {
	mock *MockUserDomainService
}

// NewMockUserDomainService creates a new mock instance.
func NewMockUserDomainService(ctrl *gomock.Controller) *MockUserDomainService {
	mock := &MockUserDomainService{ctrl: ctrl}
	mock.recorder = &MockUserDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDomainService) EXPECT() *MockUserDomainServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserDomainService) CreateUser(arg0 domain.UserDomainInterface) *errorhandler.ErrorHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*errorhandler.ErrorHandler)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDomainServiceMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDomainService)(nil).CreateUser), arg0)
}

// Login mocks base method.
func (m *MockUserDomainService) Login(arg0 requestdto.LoginDTO) (domain.UserDomainInterface, string, *errorhandler.ErrorHandler) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(domain.UserDomainInterface)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*errorhandler.ErrorHandler)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUserDomainServiceMockRecorder) Login(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserDomainService)(nil).Login), arg0)
}
